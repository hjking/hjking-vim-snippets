snippet struct "structure"
struct {
    $3
} ${2:name};
endsnippet

snippet union "uinon"
typedef union {
    $2
} ${1:name};
endsnippet

snippet program "program auto"
program automatic ${1:program_name}();
   ${1://body}
endprogram
endsnippet

snippet initial "initial block"
initial begin
    $1
end
endsnippet

snippet new "new call"
    $1 = new("$1", this);
endsnippet

snippet if "if"
if (${1:condition}) begin
    ${VISUAL}
end
endsnippet

snippet ife "Conditional if..else (ife)"
if (${1:condition}) begin
    ${2:// body...}
end else begin
    ${3:// else...}
end
endsnippet

snippet elif "else if block"
else if ($1) begin
    $2
end
endsnippet

snippet else "else block"
else begin
    $1
end
endsnippet

snippet repeat "repeat N"
repeat (${1:N}) begin
    $2
end
endsnippet

snippet module "module"
module ${1:module_name};
    $2
endmodule : $1
endsnippet

snippet interface "interface"
interface ${1:name}If (input bit ${2:clk}
                       input bit ${3:rstN}
                       );
    $4
endinterface : ${1}If
endsnippet

snippet clocking "clocking"
clocking ${1:module_name} @(${2:posedge} ${3:clk});
    $4
endclocking : $1
endsnippet

snippet task "task"
task ${1:task_name}($2);
    $3
endtask : $1
endsnippet

snippet for "for"
for ($1; $2; $3) begin
    $4
end
endsnippet

snippet foreach "for"
foreach (${1:x}[i]) begin
    $2
end
endsnippet

snippet class "class"
class ${1:class_name};
    $2;
endclass: $1
endsnippet

snippet function "function"
function ${1:void} ${2:func_name}();
    ${3:${VISUAL}}
endfunction : $2
endsnippet

snippet while "while"
while (${1:condition}) begin
    ${2://statement}
end
endsnippet

snippet fork "fork join"
fork
    begin
        $1
    end

    begin
    end
join
endsnippet

snippet forka "fork join_any"
fork
    begin
        $1
    end

    begin
    end
join_any
endsnippet

snippet forkn "fork join_none"
fork
    begin
        $1
    end

    begin
    end
join_none
endsnippet
